**Sudoku::Generator::Generator()
--> Đoạn code trên định nghĩa constructor của lớp Sudoku::Generator. Các biến thành viên mGrid và mGridSolution được khởi tạo giá trị mặc định bằng nullptr trong danh sách khởi tạo của constructor bằng cách sử dụng syntax khởi tạo đồng thời (member initialization list). 

Vì mGrid và mGridSolution được khởi tạo bằng giá trị nullptr, chúng ta có thể hiểu rằng chưa có bảng chơi Sudoku được tạo ra và chưa có giải pháp cho bảng chơi đó. Chúng ta sẽ cần phải cấp phát bộ nhớ động để lưu trữ các giá trị cho các biến thành viên này khi tạo bảng chơi và giải bảng chơi.


**inline void Sudoku::Generator::setElement(const int row, const int col, const int num)
--> Hàm setElement là một phương thức của lớp Generator trong chương trình tạo ra một trò chơi Sudoku. Phương thức này được định nghĩa dưới dạng inline, có nghĩa là khi được gọi, mã máy sẽ được nhúng trực tiếp vào chỗ gọi phương thức, thay vì phải đi qua bước biên dịch (compilation) riêng. Điều này giúp cải thiện tốc độ thực thi chương trình.

Phương thức này thực hiện thiết lập giá trị của ô Sudoku tại vị trí (row, col) trong lưới chơi (grid) của trò chơi. Với một lưới Sudoku chuẩn kích thước 9x9, chỉ số hàng và cột lần lượt từ 0 đến 8, ta có thể tính được chỉ số của ô cần thiết lập giá trị bằng công thức row * 9 + col. Sau đó, giá trị num sẽ được gán cho ô tại vị trí tương ứng trong mảng mGrid của đối tượng Generator.


**inline int Sudoku::Generator::getElement(const int row, const int col) const
--> Hàm getElement trong lớp Generator của Sudoku dùng để trả về giá trị phần tử tại vị trí (row, col) trong lưới mGrid.

row: số nguyên, chỉ số hàng của phần tử cần truy xuất trong lưới mGrid.

col: số nguyên, chỉ số cột của phần tử cần truy xuất trong lưới mGrid.

mGrid: con trỏ tới mảng 1 chiều có kích thước là 81 (9 hàng, mỗi hàng có 9 phần tử) lưu trữ các giá trị của lưới sudoku được tạo ra.

getElement: hàm trả về giá trị phần tử tại vị trí (row, col) trong lưới mGrid.

row * 9 + col: công thức tính chỉ số của phần tử trong mảng 1 chiều mGrid, vì mỗi hàng có 9 phần tử nên chỉ số phần tử của hàng tiếp theo sẽ tăng lên 9 đơn vị. Ví dụ: nếu (row, col) là (3, 4) thì chỉ số của phần tử tương ứng trong mảng 1 chiều là 3*9 + 4 = 31.


**void Sudoku::Generator::swapNumbers(const int index1, const int index2)
--> Hàm swapNumbers() trong lớp Generator của chương trình Sudoku được sử dụng để hoán đổi vị trí của hai số trong mảng mGrid của lớp.

Cụ thể, hàm sẽ thực hiện các bước sau đây:

XOR bit giữa mGrid[index1] và mGrid[index2], lưu giá trị vào mGrid[index1].
XOR bit giữa mGrid[index1] và mGrid[index2], lưu giá trị vào mGrid[index2].
XOR bit giữa mGrid[index1] và mGrid[index2], lưu giá trị vào mGrid[index1].

Kết quả của hàm này sẽ là mảng mGrid với hai số tại vị trí tương ứng đã được hoán đổi giá trị.


**void Sudoku::Generator::swapRows(const int row1, const int row2)
--> hàm swapRows() trong lớp Generator của chương trình Sudoku được dùng để hoán đổi vị trí của hàng trong trò chơi

Phương thức này duyệt qua tất cả các CỘT trong hai HÀNG và gọi phương thức swapNumbers để hoán đổi các phần tử trong các cột của hai hàng này. Cách thức hoán đổi các phần tử được thực hiện bởi phương thức swapNumbers đã được giải thích trước đó. Qua đó, phương thức swapRows đảm bảo rằng khi hoán đổi hai hàng, các phần tử trong các cột của hai hàng này sẽ được hoán đổi theo cách đúng đắn để giữ nguyên tính đúng đắn của lưới Sudoku.


**void Sudoku::Generator::swapCols(const int col1, const int col2)
--> hàm swapRows() trong lớp Generator của chương trình Sudoku được dùng để hoán đổi vị trí của cột trong trò chơi

Phương thức này duyệt qua tất cả các HÀNG trong hai CỘT và gọi phương thức swapNumbers để hoán đổi các phần tử trong các hàng của hai cột này. Cách thức hoán đổi các phần tử được thực hiện bởi phương thức swapNumbers đã được giải thích trước đó. Qua đó, phương thức swapRows đảm bảo rằng khi hoán đổi hai cột, các phần tử trong các cột của hai cột này sẽ được hoán đổi theo cách đúng đắn để giữ nguyên tính đúng đắn của lưới Sudoku.


**void Sudoku::Generator::swapRowBlocks(const int rowBlock1, const int rowBlock2)
--> hàm swapRowBlocks() trong lớp Generator của chương trình Sudoku được dùng để hoán đổi vị trí của các block của hàng trong trò chơi (trong ô 3x3) ->Tức là 3 hàng liên tiếp

Cụ thể, hàm này nhận đầu vào là hai chỉ số rowBlock1 và rowBlock2 đại diện cho hai khối hàng cần được hoán đổi vị trí. Sau đó, hàm sử dụng vòng lặp để duyệt qua từng hàng trong hai khối hàng này và sử dụng hàm swapRows (được định nghĩa trước đó trong lớp) để hoán đổi vị trí của các hàng này. Kết quả là, các hàng trong hai khối hàng được hoán đổi vị trí với nhau.


**void Sudoku::Generator::swapColBlocks(const int colBlock1, const int colBlock2)
--> hàm swapColBlocks() trong lớp Generator của chương trình Sudoku được dùng để hoán đổi vị trí của các block của cột trong trò chơi (trong ô 3x3) ->Tức là 3 cột liên tiếp

Cụ thể, hàm này nhận đầu vào là hai chỉ số colBlock1 và colBlock2 đại diện cho hai khối cột cần được hoán đổi vị trí. Sau đó, hàm sử dụng vòng lặp để duyệt qua từng cột trong hai khối hàng này và sử dụng hàm swapCols (được định nghĩa trước đó trong lớp) để hoán đổi vị trí của các cột này. Kết quả là, các cột trong hai khối cột được hoán đổi vị trí với nhau.














****************************************************************
***************************************************************
**void Sudoku::Generator::fillNextRow(const int previousRow, const int nextRow, const int shifts)
--> Hàm fillNextRow được sử dụng để điền các giá trị vào hàng tiếp theo trong lưới sudoku dựa trên hàng trước đó đã được điền giá trị.

Tham số previousRow là hàng trước đó đã được điền giá trị, nextRow là hàng tiếp theo cần được điền giá trị, và shifts là số lượng ô cần di chuyển để tạo ra hàng tiếp theo.

Hàm sử dụng vòng lặp để duyệt qua từng ô trong hàng tiếp theo, và điền giá trị tương ứng bằng cách lấy giá trị từ cột tương ứng trong hàng trước đó và di chuyển nó sang phải bằng shifts ô. Nếu giá trị được điền vào vượt quá giới hạn của lưới (9 ô) thì hàm sẽ quay lại và điền giá trị vào từ đầu của lưới.

Hàm getElement và setElement được sử dụng để truy xuất và gán giá trị trong lưới sudoku tại hàng và cột tương ứng.

Ví dụ: *******************************************
Hàng 0: 1 2 3 4 5 6 7 8 9

Sau fillNextRow(0, 1, 3), hàng 1 sẽ trở thành: 
1 2 3 4 5 6 7 8 9 -> 4 5 6 1 2 3 7 8 9

Sau fillNextRow(1, 2, 3), hàng 2 sẽ trở thành: 
4 5 6 1 2 3 7 8 9 -> 1 2 3 7 8 9 4 5 6
**************************************************************
**************************************************************

















**void Sudoku::Generator::copyGrid(int* grid) const
--> Hàm copyGrid được định nghĩa trong class Sudoku::Generator và được sử dụng để sao chép dữ liệu trong lưới Sudoku sang một mảng khác.

Đầu tiên, hàm truyền vào một con trỏ tới mảng grid để chứa dữ liệu được sao chép. Sau đó, trong vòng lặp, mỗi phần tử của mGrid (được lưu trữ dưới dạng một mảng một chiều gồm 81 phần tử) được sao chép sang grid tương ứng bằng cách gán grid[i] = mGrid[i]. Cuối cùng, khi vòng lặp kết thúc, dữ liệu đã được sao chép sang mảng grid và hàm sẽ kết thúc.








***************************CHÚ Ý******************************
**************đây là cách để tạo game sudoku hoàn chỉnh**********
**void Sudoku::Generator::createCompletedSudoku()
Đầu tiên, code sẽ tạo ra các giá trị ngẫu nhiên mỗi khi chạy chương trình

Ở hàng đầu tiên thì sẽ điền các số từ 1 tới 9 vào (1)

Sau đó sử dụng 1 vòng lặp để xáo trộn hàng đầu tiên của game với 50 lần hoán đổi. Và với mỗi lần lặp thì chương trình sử dụng hàm rand() để tạo 2 chỉ số ngẫu nhiên trong khoảng thì 0 tới 8(do bảng Sudoku có kích thước là 9x9), sau đó kiểm tra xem hai chỉ số này có khác nhau không. Nếu khác nhau, chương trình sẽ gọi hàm swapNumbers để hoán đổi vị trí của hai phần tử tương ứng với hai chỉ số này trong hàng. (2)

fillNextRow(0, 1, 3);   // Điền số vào hàng thứ 2 bằng cách dịch chuyển hàng 1 vị trí sang phải 3 vị trí (3)
fillNextRow(1, 2, 3);   // Điền số vào hàng thứ 3 bằng cách dịch chuyển hàng 2 vị trí sang phải 3 vị trí (3)

fillNextRow(2, 3, 1);   // Điền số vào hàng thứ 4 bằng cách dịch chuyển hàng 3 vị trí sang phải 1 vị trí (4)

fillNextRow(3, 4, 3);   // Điền số vào hàng thứ 5 bằng cách dịch chuyển hàng 4 vị trí sang phải 3 vị trí (5)
fillNextRow(4, 5, 3);   // Điền số vào hàng thứ 6 bằng cách dịch chuyển hàng 5 vị trí sang phải 3 vị trí (5)

fillNextRow(5, 6, 1);   // Điền số vào hàng thứ 7 bằng cách dịch chuyển hàng 6 vị trí sang phải 1 vị trí (6)

fillNextRow(6, 7, 3);   // Điền số vào hàng thứ 8 bằng cách dịch chuyển hàng 7 vị trí sang phải 3 vị trí (7)
fillNextRow(7, 8, 3);   // Điền số vào hàng thứ 9 bằng cách dịch chuyển hàng 8 vị trí sang phải 3 vị trí (7)

ví dụ: fillNextRow 

1	2	3 |	4	5	6 |	7	8	9 | hàng 0
4	5	6 |	7	8	9 |	1	2	3 | --> 0,1,3	
7	8	9 |	1	2	3 |	4	5	6 | --> 1,2,3
-------------------------------------------------
8	9	1 |	2	3	4 |	5	6	7 | --> 2,3,1
2	3	4 |	5	6	7 |	8	9	1 | --> 3,4,3
5	6	7 |	8	9	1 |	2	3	4 | --> 4,5,3
-------------------------------------------------
6	7	8 |	9	1	2 |	3	4	5 | --> 5,6,1
9	1	2 |	3	4	5 |	6	7	8 | --> 6,7,3
3	4	5 |	6	7	8 |	9	1	2 | --> 7,8,3
đcm
Sau đó code sẽ đảo hết tất cả các hàng, cột trong mỗi block. Tiếp theo code sẽ đảo hết các block. 

Cuối cùng, code sao chép grid hiện tại của game vào grid của solution
********************************************************************
********************************************************************
********************************************************************



















**void Sudoku::Generator::generate(int* grid, int* solutionGrid)
--> Hàm generate trong lớp Sudoku::Generator được sử dụng để tạo ra một bảng Sudoku ngẫu nhiên. Đầu vào của hàm là hai mảng integer grid và solutionGrid, lần lượt đại diện cho lưới chưa được giải quyết và lưới giải quyết của Sudoku.

Đầu tiên, hàm gọi đến hàm createCompletedSudoku để tạo ra một bảng Sudoku hoàn chỉnh.

Sau đó, hàm sử dụng hàm srand để thiết lập seed ngẫu nhiên cho việc sinh số ngẫu nhiên.

Hàm tạo một đối tượng Solver để giải quyết bảng Sudoku. Đối tượng Solver được cài đặt với thuộc tính genModifier được thiết lập thành true để chỉ ra rằng đây là bảng Sudoku được sử dụng cho mục đích tạo ra bảng Sudoku mới.

Hàm tạo một mảng bool removed với 81 phần tử. Mảng này sẽ theo dõi xem mỗi phần tử trên bảng Sudoku đã bị xóa hay chưa.

Hàm tạo một mảng integer duplicateGrid với 81 phần tử. Mảng này sẽ được sử dụng để tạo một bản sao tạm thời của bảng Sudoku, mà các phần tử sẽ được xóa.

Biến removingNumber lưu trữ số hiện tại được chọn để xóa.

Biến toRemove lưu trữ số lượng phần tử cần xóa. Trong ví dụ này, số lượng phần tử cần xóa được thiết lập là 50.

Sử dụng vòng lặp while, hàm chọn một phần tử ngẫu nhiên trên bảng Sudoku, và kiểm tra xem phần tử đó đã được xóa hay chưa bằng cách kiểm tra giá trị tương ứng trong mảng removed. Nếu phần tử chưa được xóa, hàm thực hiện các bước sau:

Chọn một số ngẫu nhiên trên hàng và cột tương ứng của phần tử, đánh dấu số đó là removingNumber.

Tạo một bản sao tạm thời của bảng Sudoku và gán giá trị của phần tử được chọn thành 0. Sau đó, tạo một biến numToIgnore đại diện cho phần tử đang được xóa, và thiết lập nó trong Solver bằng cách sử dụng phương thức setGrid.

Chạy Solver để kiểm tra xem bảng Sudoku mới có thể được giải quyết hay không. Nếu Solver không tìm thấy lời giải, phần tử đang được xóa được đánh dấu bằng 0 trên bảng Sudoku và được đánh dấu là đã bị xóa trong mảng removed. Biến toRemove được giảm đi 1.
(nếu Solver tìm ra được lời giải thì bảng Sudoku sẽ có thể có nhiều cách giải khác nhau. Việc xoá các phần tử của bảng Sudoku gốc sẽ làm cho bảng Sudoku mới có thể có một số lượng lời giải ít hơn so với bảng gốc. Mục đích của việc xoá các phần tử trong bảng Sudoku là tạo ra một bảng Sudoku mới với độ khó tương đương hoặc tương đối với bảng Sudoku gốc.)

Quá trình lặp lại cho đến khi đủ 50 số lượng phần tử cần xóa được xóa.


**void Sudoku::Generator::display() const
-->hiển thị bảng Sudoku ra màn hình console để debug





